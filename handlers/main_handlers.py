from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from data.database import database, Partner
from keybooards.main_keyboards import reply_phone_number
from config_data.amo_api import AmoCRMWrapper

main_router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É start
@main_router.message(Command(commands=['start', 'info']))
async def start_handler(message: Message, amo_api: AmoCRMWrapper):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ tg_id –≤ –±–¥ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø—Ä–æ—Å –≤ –∞–º–æ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    if str(tg_id) in database.keys():
        partner: Partner = database[str(tg_id)]
        phone_number = partner.phone_number
        response = amo_api.get_customer_by_phone(phone_number)
        if response[0]:
            customer_params = amo_api.get_customer_params(response[1])
            await message.answer(text=f'<b><u>–î–∞–Ω–Ω—ã–µ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</u></b>\n\n'
                                      f'üë§ –ò–º—è - {customer_params.name}\n\n'
                                      f'‚úÖ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - {customer_params.kval}\n\n'
                                      f'üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - {customer_params.manager}\n\n'
                                      f'üåü –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ - {customer_params.status}\n\n'
                                      f'üìÜ –ü–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ 1 –∞–ø—Ä–µ–ª—è 2025 –≥–æ–¥–∞ - {customer_params.bye_after_first_april}\n\n'
                                      f'üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã - {customer_params.bonuses}\n\n'
                                      f'üì§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ - {customer_params.payout}\n\n'
                                      f'üåÜ –ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã - {customer_params.town}'
                                 )
        else:
            await message.answer(text=response[1])

    # –ï—Å–ª–∏ id –≤ –±–¥ –Ω–µ—Ç, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –∞–º–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    else:
        name = message.from_user.first_name
        await message.answer(text=f'{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
                                  f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.',
                             reply_markup=await reply_phone_number())


# –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
@main_router.message(F.contact)
async def get_contact(message: Message, amo_api: AmoCRMWrapper):
    contact = message.contact
    response = amo_api.get_customer_by_phone(contact.phone_number)
    if response[0]:
        customer_params = amo_api.get_customer_params(response[1])
        partner_obj = Partner(
            customer_id=customer_params.id,
            last_name=customer_params.name.split()[1],
            first_name=customer_params.name.split()[0],
            phone_number=contact.phone_number,
            is_partner=customer_params.kval
        )
        database[str(message.from_user.id)] = partner_obj
        await message.answer(text=f'<b><u>–î–∞–Ω–Ω—ã–µ –í–∞—à–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞:</u></b>\n\n'
                                  f'üë§ –ò–º—è - {customer_params.name}\n\n'
                                  f'‚úÖ –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - {customer_params.kval}\n\n'
                                  f'üë• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - {customer_params.manager}\n\n'
                                  f'üåü –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ - {customer_params.status}\n\n'
                                  f'üìÜ –ü–æ–∫—É–ø–æ–∫ –ø–æ—Å–ª–µ 1 –∞–ø—Ä–µ–ª—è 2025 –≥–æ–¥–∞ - {customer_params.bye_after_first_april}\n\n'
                                  f'üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã - {customer_params.bonuses}\n\n'
                                  f'üì§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ - {customer_params.payout}\n\n'
                                  f'üåÜ –ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã - {customer_params.town}',
                             reply_markup=ReplyKeyboardRemove()
                             )
    else:
        await message.answer(text=response[1])


@main_router.message(Command(commands='contacts'))
async def contacts(message: Message):

    await message.answer(text=f'<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –º–æ–∂–Ω–æ</b>:\n\n'
                              f'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b> :\n'
                              f'+7 (495) 256-33-00\n\n'
                              f'üìß <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</b> :\n'
                              f'<a href="sales@hite-pro.ru">sales@hite-pro.ru</a>\n\n'
                              f'üì± <b>WhatsApp</b> :\n'
                              f'<a href="https://wa.me/79251930861">–°—Å—ã–ª–∫–∞ –Ω–∞ whatsapp</a>')


@main_router.message(Command(commands=['connect', 'support', 'registration', 'education']))
async def in_dev(message: Message):
    await message.answer(text='–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª  –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
                              '–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!')



