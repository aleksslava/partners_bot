import logging
import json
import os
from pprint import pprint

from service.service import Order, get_kp_pdf

from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, WebAppInfo, \
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile

from keybooards.main_keyboards import (reply_phone_number, get_contacts_list, hide_contacts_list, get_start_keyboard,
                                       forum_button, manager_button, support_button, problem_button,
                                       helpfull_materials_keyboard, back_button, answer_for_user, authorized_client,
                                       link_to_opt_button,
                                       )
from config_data.amo_api import AmoCRMWrapper, Contact
from lexicon.lexicon_ru import account_info, Lexicon_RU, start_menu, helpfull_materials_menu

main_router = Router()
logger = logging.getLogger(__name__)


@main_router.message(CommandStart())  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def command_start_process(message: Message):

    await message.answer(text='<b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ HiTE PRO!</b>',
                         reply_markup=await get_start_keyboard(start_menu))


@main_router.message(Command(commands=['info']))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /info
async def info_handler(message: Message, amo_api: AmoCRMWrapper, fields_id: dict):
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ –±–¥ –ø–æ tg_id

    customer = amo_api.get_customer_by_tg_id(tg_id)
    if customer.get('status_code'):
        if customer.get('tg_id_in_db'):
            customer = customer.get('response')
            responsible_manager = amo_api.get_responsible_user_by_id(int(customer.get('responsible_user_id')))
            customer['manager'] = responsible_manager
            customer_params = amo_api.get_customer_params(customer, fields_id=fields_id)
            await message.answer(text=account_info(customer_params),
                                 reply_markup=await get_contacts_list(customer_params.id))
        else:
            # –ï—Å–ª–∏ tg_id –Ω–µ—Ç –≤ –±–¥, —Ç–æ –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            name = message.from_user.first_name
            await message.answer(text=f'{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
                                      f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.üëá',
                                 reply_markup=await reply_phone_number())
    else:
        await message.answer(text='–û—à–∏–±–∫–∞! –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–µ:',
                             reply_markup=await problem_button())


@main_router.callback_query(F.data == '/info')  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
async def info_handler_cl(callback: CallbackQuery, amo_api: AmoCRMWrapper, fields_id: dict):
    await callback.answer()
    tg_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ –∞–º–æ –ø–æ tg_id

    customer = amo_api.get_customer_by_tg_id(tg_id)
    if customer.get('status_code'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–º–æ
        if customer.get('tg_id_in_db'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è tg_id –≤ –±–∞–∑–µ –∞–º–æ
            customer = customer.get('response')
            responsible_manager = amo_api.get_responsible_user_by_id(int(customer.get('responsible_user_id')))
            customer['manager'] = responsible_manager
            customer_params = amo_api.get_customer_params(customer, fields_id=fields_id)
            await callback.message.edit_text(text=account_info(customer_params),
                                             reply_markup=await get_contacts_list(customer_params.id))
        else:
            # –ï—Å–ª–∏ tg_id –Ω–µ—Ç –≤ –±–¥, —Ç–æ –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            name = callback.message.chat.first_name
            await callback.message.answer(text=f'{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
                                               f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.üëá',
                                          reply_markup=await reply_phone_number())
    else:
        await callback.message.edit_text(text='–û—à–∏–±–∫–∞! –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å. '
                                              'üëá –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–µ.',
                                         reply_markup=await problem_button())


@main_router.message(F.contact)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: Message, amo_api: AmoCRMWrapper, fields_id: dict):
    contact_phone = message.contact.phone_number
    contact_username = '@' + message.from_user.username if message.from_user.username is not None else ''

    customer = amo_api.get_customer_by_phone(contact_phone)
    if customer[0]:
        contact_id = customer[2].get('id')
        responsible_manager = amo_api.get_responsible_user_by_id(int(customer[1].get('responsible_user_id')))
        customer[1]['manager'] = responsible_manager
        customer_params = amo_api.get_customer_params(customer[1], fields_id=fields_id)
        amo_api.put_tg_id_to_customer(customer_params.id, message.from_user.id)
        amo_api.put_tgid_username_to_contact(id_contact=contact_id,
                                             username=contact_username,
                                             tg_id=message.from_user.id,
                                             fields_id=fields_id.get('contacts_fields_id'))

        await message.answer(text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —á–∞—Ç –±–æ—Ç–µ HiTE PRO!\n\n'
                                  f'–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
                                  f'–º–∞–≥–∞–∑–∏–Ω–æ–º HiTE PROüëá', reply_markup=await authorized_client(start_menu))
    else:
        await message.answer(text=f'{customer[1]}\n\n'
                                  f'–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–∞—Ç-–±–æ—Ç–æ–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä—ã.\n'
                                  f'üëá –ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Ç–Ω—ë—Ä –∫–æ–º–ø–∞–Ω–∏–∏ HiTE PRO, '
                                  f'—Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–µ.',
                             reply_markup=await problem_button())


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"
@main_router.callback_query(F.data.startswith('contacts_list'))
async def open_contacts_list(callback: CallbackQuery, amo_api: AmoCRMWrapper):
    last_message = callback.message.text
    customer_id = callback.data.split('_')[2]
    customer = amo_api.get_customer_by_id(customer_id, with_contacts=True)
    contacts_list_id = [contact.get('id') for contact in customer[1]['_embedded']['contacts']]
    last_message = last_message + '\n\n<b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é</b>\n'

    for contact_id in contacts_list_id:
        contact_data = Contact(**amo_api.get_contact_by_id(contact_id))
        last_message = last_message + str(contact_data)

    await callback.message.edit_text(text=last_message, reply_markup=await hide_contacts_list(customer_id))


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"
@main_router.callback_query(F.data.startswith('hide_contacts_list'))
async def hide_contact_list(callback: CallbackQuery):
    customer_id = callback.data.split('_')[3]
    last_text = callback.message.text
    hide_index = last_text.find('–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ')
    new_text = last_text[:hide_index]
    await callback.message.edit_text(text=new_text, reply_markup=await get_contacts_list(customer_id))


@main_router.message(Command(commands='contacts'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /contacts
async def contacts(message: Message):
    await message.answer(text=Lexicon_RU.get('contact_message'))


@main_router.callback_query(F.data == '/contacts')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "contacts"
async def command_contacts_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('contact_message'))


@main_router.message(Command(commands='shop'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /shop
async def command_shop_process(message: Message, amo_api: AmoCRMWrapper, fields_id: dict):
    tg_id = message.from_user.id
    customer = amo_api.get_customer_by_tg_id(tg_id)
    contact = amo_api.get_contact_by_tg_id(tg_id, fields_id=fields_id.get('contacts_fields_id'))

    if customer.get('status_code') and contact.get('status_code'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–º–æ
        if customer.get('tg_id_in_db') and contact.get('tg_id_in_db'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è tg_id –≤ –±–∞–∑–µ –∞–º–æ
            customer = customer.get('response')
            customer['manager'] = {'name': None}
            customer_params = amo_api.get_customer_params(customer, fields_id=fields_id)
            bonus = str(customer_params.bonuses).replace(' ', '')
            discont = ''.join(list(filter(lambda x: x.isdigit(), customer_params.status)))
            web_app_url = fields_id.get('web_app_url')
            contact = contact.get('response')
            contact_id = contact.get('id')

            kb_1 = KeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                  web_app=WebAppInfo(
                                      url=f'{web_app_url}?bonus={bonus}&'
                                          f'id={contact_id}&discont={discont}'))
            webapp_keyboard_1 = ReplyKeyboardMarkup(is_persistent=True, keyboard=[[kb_1, ]],
                                                    resize_keyboard=True, one_time_keyboard=True)

            await message.answer(text='–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ãüëá',
                                 reply_markup=webapp_keyboard_1)
        else:
            # –ï—Å–ª–∏ tg_id –Ω–µ—Ç –≤ –±–¥, —Ç–æ –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            name = message.from_user.first_name
            await message.answer(text=f'{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
                                      f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.üëá',
                                 reply_markup=await reply_phone_number())
    else:
        if customer.get('status_code'):
            response = contact.get('response')
        else:
            response = customer.get('response')
        await message.answer(text=f'{response}\n\n'
                                  f'üëá –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–µ.',
                             reply_markup=await problem_button())


@main_router.callback_query(F.data == '/shop')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "shop"
async def command_shop_process_cl(callback: CallbackQuery, amo_api: AmoCRMWrapper, fields_id: dict):
    tg_id = callback.from_user.id

    customer = amo_api.get_customer_by_tg_id(tg_id)
    contact = amo_api.get_contact_by_tg_id(tg_id, fields_id=fields_id.get('contacts_fields_id'))

    if customer.get('status_code') and contact.get('status_code'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–º–æ
        if customer.get('tg_id_in_db') and contact.get('tg_id_in_db'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è tg_id –≤ –±–∞–∑–µ –∞–º–æ
            customer = customer.get('response')
            customer['manager'] = {'name': None}
            customer_params = amo_api.get_customer_params(customer, fields_id=fields_id)

            bonus = str(customer_params.bonuses).replace(' ', '')
            discont = ''.join(list(filter(lambda x: x.isdigit(), customer_params.status)))
            web_app_url = fields_id.get('web_app_url')
            contact = contact.get('response')
            contact_id = contact.get('id')

            kb_1 = KeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
                                  web_app=WebAppInfo(
                                      url=f'{web_app_url}?bonus={bonus}&'
                                          f'id={contact_id}&discont={discont}'))
            webapp_keyboard_1 = ReplyKeyboardMarkup(keyboard=[[kb_1, ]], resize_keyboard=True)

            await callback.message.answer(text='–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ãüëá',
                                          reply_markup=webapp_keyboard_1)
        else:
            # –ï—Å–ª–∏ tg_id –Ω–µ—Ç –≤ –±–¥, —Ç–æ –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            name = callback.from_user.first_name
            await callback.message.answer(text=f'{name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
                                               f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.üëá',
                                          reply_markup=await reply_phone_number())
    else:
        if customer.get('status_code'):
            response = contact.get('response')
        else:
            response = customer.get('response')
        await callback.message.answer(text=f'{response}\n\n'
                                           f'üëá –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –≤ –æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–µ.',
                                      reply_markup=await problem_button())

    await callback.answer()


@main_router.message(Command(commands='forum'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /forum
async def command_forum_process(message: Message):
    await message.answer(text=Lexicon_RU.get('forum_message'), reply_markup=await forum_button())


@main_router.callback_query(F.data == '/forum')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "forum"
async def command_forum_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('forum_message'), reply_markup=await forum_button())


@main_router.message(Command(commands='materials'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /materials
async def command_materials_process(message: Message):
    await message.answer(text='<b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã HiTE PRO.</b>\n\n'
                              'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª.',
                         reply_markup=await helpfull_materials_keyboard(helpfull_materials_menu))


@main_router.callback_query(F.data == '/materials')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "materials"
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text='<b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã HiTE PRO.</b>\n\n'
                                          'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª.',
                                     reply_markup=await helpfull_materials_keyboard(helpfull_materials_menu))


@main_router.callback_query(F.data == 'first_message')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('helpful_materials').get('first_message'),
                                     reply_markup=await back_button())


@main_router.callback_query(F.data == 'second_message')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('helpful_materials').get('second_message'),
                                     reply_markup=await back_button())


@main_router.callback_query(F.data == 'third_message')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('helpful_materials').get('third_message'),
                                     reply_markup=await back_button())


@main_router.callback_query(F.data == 'forth_message')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('helpful_materials').get('forth_message'),
                                     reply_markup=await back_button())


@main_router.callback_query(F.data == 'five_message')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('helpful_materials').get('five_message'),
                                     reply_markup=await back_button())


@main_router.callback_query(F.data == 'back')
async def command_materials_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text='<b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã HiTE PRO.</b>\n\n'
                                          'üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª.',
                                     reply_markup=await helpfull_materials_keyboard(helpfull_materials_menu))


@main_router.message(Command(commands='partners'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /partners
async def command_partners_process(message: Message):
    await message.answer(text=Lexicon_RU.get('partner_kanal'))


@main_router.callback_query(F.data == '/partners')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "partners"
async def command_forum_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('partner_kanal'))


@main_router.message(Command(commands='manager'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /manager
async def command_manager_process(message: Message):
    await message.answer(text=Lexicon_RU.get('manager'), reply_markup=await manager_button())


@main_router.callback_query(F.data == '/manager')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "manager"
async def command_manager_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('manager'), reply_markup=await manager_button())


@main_router.message(Command(commands='support'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /support
async def command_support_process(message: Message):
    await message.answer(text=Lexicon_RU.get('support'), reply_markup=await support_button())


@main_router.callback_query(F.data == '/support')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "support"
async def command_support_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('support'), reply_markup=await support_button())


@main_router.message(Command(commands='problem'))  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /problem
async def command_problem_process(message: Message):
    await message.answer(text=Lexicon_RU.get('problem'), reply_markup=await problem_button())


@main_router.callback_query(F.data == '/problem')  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–∫–∏ "problem"
async def command_problem_process_cl(callback: CallbackQuery):
    await callback.message.edit_text(text=Lexicon_RU.get('problem'), reply_markup=await problem_button())


@main_router.message(F.text != None)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def answer_message(message: Message):
    await message.answer(text=Lexicon_RU.get('answer_for_user'), reply_markup=await answer_for_user())
    print(message.chat.id)


@main_router.message(F.web_app_data.data != None)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ webapp
async def web_app_order(message: Message, amo_api: AmoCRMWrapper, fields_id: dict, bot: Bot):
    raw_json = json.loads(message.web_app_data.data)
    full_price = raw_json.get('total')
    contact_id = raw_json.get('userId')

    try:

        if contact_id is None:
            raise ValueError('–ù–µ—Ç id –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–∫–∞–∑')

        order_data = Order(raw_json=raw_json, lead_id=111)
        if order_data.order_type == "commercial_offer":
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ö–ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            response = amo_api.send_lead_to_amo(pipeline_id=fields_id.get('pipeline_id'),
                                            status_id=fields_id.get('status_id_kp'),
                                            tag_id=fields_id.get('tag_id'),
                                            contact_id=int(contact_id),
                                            price=int(full_price),
                                            fields_id=fields_id.get('lead_custom_fields'),
                                            order_data=order_data.get_fields_for_lead())
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"
            response = amo_api.send_lead_to_amo(pipeline_id=fields_id.get('pipeline_id'),
                                                status_id=fields_id.get('status_id_order'),
                                                tag_id=fields_id.get('tag_id'),
                                                contact_id=int(contact_id),
                                                price=int(full_price),
                                                fields_id=fields_id.get('lead_custom_fields'),
                                                order_data=order_data.get_fields_for_lead())
        lead_id = response.get('_embedded').get('leads')[0].get('id')
        order_note = Order(raw_json=raw_json, lead_id=lead_id)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –≤ —Å–¥–µ–ª–∫—É
        amo_api.add_new_note_to_lead(lead_id=lead_id, text=order_note.get_order_message())

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–¥–µ–ª–∫—É
        items = raw_json.get('items')
        amo_api.add_catalog_elements_to_lead(lead_id=lead_id,
                                             catalog_id=fields_id.get('catalog_id'),
                                             elements=items)
        # –°–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ö–ü –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ö–ü –≤ —á–∞—Ç –±–æ—Ç.
        if order_data.order_type == 'commercial_offer':
            get_kp_pdf(lead_id)
            document = FSInputFile(f'Kp_{lead_id}.pdf')
            await message.answer_document(document=document, caption='–ö–ü –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!')
            os.remove(f'Kp_{lead_id}.pdf')
            await message.answer(text=Lexicon_RU.get('message_link_partners_kp'),
                                 reply_markup=await link_to_opt_button(lead_id=lead_id))

        # –°–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—á–µ—Ç–∞
        else:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            await message.answer(text=order_note.get_order_message(service=False),
                                 reply_markup=ReplyKeyboardRemove())

            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏
            await message.answer(text=Lexicon_RU.get('message_link_partners_order'),
                                 reply_markup=await link_to_opt_button(lead_id=lead_id))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        await bot.send_message(chat_id=fields_id.get('chat_id'),
                               text=f'–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑:\n\n{order_note.get_order_message()}\n'
                                    f'–°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: '
                                    f'<a href="https://hite.amocrm.ru/leads/detail/{lead_id}">{lead_id}</a>\n'
                                    f'–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: '
                                    f'<a href="https://hite.amocrm.ru/contacts/detail/{contact_id}">{contact_id}</a>')

    except BaseException as error:
        logger.error(error)

        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.',
                             reply_markup=ReplyKeyboardRemove())

        await bot.send_message(chat_id=fields_id.get('chat_id'),
                               text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n\n{error}\n'
                                    f'–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞:'
                                    f'<a href="https://hite.amocrm.ru/contacts/detail/{contact_id}">{contact_id}</a>')
